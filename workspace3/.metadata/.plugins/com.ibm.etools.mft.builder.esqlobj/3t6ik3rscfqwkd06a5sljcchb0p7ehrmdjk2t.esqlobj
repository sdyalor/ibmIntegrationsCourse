CREATE COMPUTE MODULE MF_MYFIRSTREST_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET OutputRoot.Properties = InputRoot.Properties;
		SET OutputRoot.MQMD = InputRoot.MQMD;
		
		
		DECLARE tipo CHARACTER InputLocalEnvironment.HTTP.Input.Path.Segment[<];
		
		SET Environment.tipo = tipo; 
		--DECLARE xml CHARACTER CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId );
		
		
		
		IF tipo ='xml' THEN
		  CREATE LASTCHILD OF Environment DOMAIN 'XMLNSC' PARSE(InputRoot.BLOB.BLOB);
		  DECLARE refEnv REFERENCE TO  Environment.XMLNSC.Data;
		  
		  CREATE LASTCHILD OF OutputRoot DOMAIN 'XMLNSC' NAME 'XMLNSC';
		  CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'Data';
		  DECLARE refOut REFERENCE TO  OutputRoot.XMLNSC.Data;
		  
		 -- SET refOut.codigo = CAST(pk AS INTEGER);
	     SET refOut.nomb_desc = refEnv.nomb_desc;
	     -- SET refOut.nombre = Environment.nombre;
			
		ELSEIF tipo ='json' THEN
		  CREATE LASTCHILD OF Environment DOMAIN 'JSON' PARSE(InputRoot.BLOB.BLOB);
		  DECLARE refEnv REFERENCE TO  Environment.JSON.Data;
		  
		  CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON' NAME 'JSON';
		  CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		  DECLARE refOut REFERENCE TO  OutputRoot.JSON.Data;
		  
		 -- SET refOut.codigo = CAST(pk AS INTEGER);
	      SET refOut.nomb_desc = refEnv.nomb_desc;
	     -- SET refOut.nombre = Environment.nombre;
			
		
		END IF;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;